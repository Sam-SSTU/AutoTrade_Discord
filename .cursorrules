# Cursor Rules for AutoTrade Discord Project

## üö® Critical Safety Rules

### Data Loss Prevention
**NEVER execute destructive operations without explicit user confirmation:**
- Do not run database reset scripts, drop commands, or cleanup operations
- Do not delete files, directories, or data
- Do not clear caches or logs
- If user asks hypothetical questions (e.g., "What would happen if..."), only provide analysis, DO NOT execute

### Examples of FORBIDDEN actions without explicit request:
- `python tests/reset_db.py` (database reset)
- `DROP DATABASE` commands
- `rm -rf` or file deletion
- Database migration rollbacks
- Clear application data

### Required confirmation phrases:
- User must explicitly say "reset database", "delete files", "clear data", etc.
- Hypothetical questions should be answered theoretically only

## üìù Development Guidelines

### Language Rules
- Answer user in ÁÆÄ‰Ωì‰∏≠Êñá (as specified in user rules)
- Write commit descriptions in English following conventional commit rules

### Code Standards
- Always test changes before suggesting them
- Use proper error handling and logging
- Follow the existing project structure and patterns
- Maintain database integrity and foreign key relationships

### Tool Usage
- Use parallel tool calls when possible for efficiency
- Always explain why tools are being used
- Read complete file context when making changes
- Validate edits before applying

ÂèØËÉΩÈúÄË¶ÅÁöÑÊåá‰ª§Ôºå‰ªÖ‰æõÂèÇËÄÉ

### 1. **ËôöÊãüÁéØÂ¢É**
```bash

# Á°Æ‰øùËôöÊãüÁéØÂ¢ÉÊøÄÊ¥ª
source venv/bin/activate  # Linux/Mac
# Êàñ venv\Scripts\activate  # Windows
```

### 2. **Ê®°Êùø‰øÆÊîπÂíåÊ†°È™å**

```bash
# 2.1 Ê®°ÊùøËØ≠Ê≥ïÊ†°È™å
python -c "from jinja2 import Template; Template(open('app/templates/TARGET_TEMPLATE.html').read()).render({'request': 'test'}); print('Ê®°ÊùøÊ∏≤ÊüìÊàêÂäü')"

# 2.2 Ê£ÄÊü•FastAPIÈùôÊÄÅÊñá‰ª∂Ë∑ØÂæÑ
# Á°Æ‰øù‰ΩøÁî® /static/ ËÄå‰∏çÊòØ url_for('static', path='...')

# 2.3 È™åËØÅJavaScriptËØ≠Ê≥ïÔºàÂ¶ÇÊûúÊ®°ÊùøÂåÖÂê´JSÔºâ
# Ê£ÄÊü•Vue.jsËØ≠Ê≥ï„ÄÅElement UIÁªÑ‰ª∂‰ΩøÁî®Á≠â
```

### 3. **Êï∞ÊçÆÂ∫ìÊ®°ÂûãÂíåËøÅÁßª**

```bash
# 3.1 Ê£ÄÊü•ÂΩìÂâçËøÅÁßªÁä∂ÊÄÅ
python -m alembic current

# 3.2 ÁîüÊàêÊñ∞ËøÅÁßªÊñá‰ª∂
python -m alembic revision --autogenerate -m "ÊèèËø∞ÊÄßÁöÑËøÅÁßª‰ø°ÊÅØ"

# 3.3 Ê£ÄÊü•ÁîüÊàêÁöÑËøÅÁßªÊñá‰ª∂
# ÊâãÂä®ÂÆ°Êü• alembic/versions/ ‰∏≠ÁöÑÊñ∞Êñá‰ª∂
# Á°Æ‰øùÊ≤°ÊúâÊÑèÂ§ñÁöÑDROPÊìç‰Ωú

# 3.4 ÊâßË°åËøÅÁßªÔºàË∞®ÊÖéÊìç‰ΩúÔºâ
python -m alembic upgrade head

# 3.5 È™åËØÅËøÅÁßªÁªìÊûú
python -c "from app.database import Base; print('Êï∞ÊçÆÂ∫ìËøûÊé•Ê≠£Â∏∏')"
```

### 4. **AIÊ®°Âùó‰øÆÊîπÊ†°È™å**

```bash
# 4.1 È™åËØÅAIÊ®°ÂûãÂØºÂÖ•
python -c "from app.ai.models import AIMessage, AIProcessingStep, AIManualEdit; print('AIÊ®°ÂûãÂØºÂÖ•ÊàêÂäü')"

# 4.2 È™åËØÅÈ¢ÑÂ§ÑÁêÜÂô®
python -c "from app.ai.preprocessor import MessagePreprocessor; print('È¢ÑÂ§ÑÁêÜÂô®ÂØºÂÖ•ÊàêÂäü')"

# 4.3 È™åËØÅOpenAIÂÆ¢Êà∑Á´Ø
python -c "from app.ai.openai_client import get_openai_client; print('OpenAIÂÆ¢Êà∑Á´ØÂØºÂÖ•ÊàêÂäü')"

# 4.4 È™åËØÅÊ∂àÊÅØÂ§ÑÁêÜÂô®
python -c "from app.ai import ai_message_handler; print('AIÊ∂àÊÅØÂ§ÑÁêÜÂô®ÂØºÂÖ•ÊàêÂäü')"
```

### 5. **Â∫îÁî®ÂêØÂä®ÂâçÁöÑÂÆåÊï¥Ê†°È™å**
```bash
# 5.1 ÁéØÂ¢ÉÂèòÈáèÊ£ÄÊü•
python -c "from app.config.settings import get_settings; settings = get_settings(); print('ÈÖçÁΩÆÂä†ËΩΩÊàêÂäü')"

# 5.2 Êï∞ÊçÆÂ∫ìËøûÊé•ÊµãËØï
python -c "from app.database import get_db; next(get_db()); print('Êï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäü')"

# 5.3 ‰∏ªÂ∫îÁî®ÂØºÂÖ•ÊµãËØï
python -c "from app.main import app; print('FastAPIÂ∫îÁî®ÂØºÂÖ•ÊàêÂäü'); print('Ë∑ØÁî±Êï∞Èáè:', len(app.routes))"

# 5.4 ‰æùËµñÊ£ÄÊü•
pip check

# 5.5 ÊâÄÊúâÊ†∏ÂøÉÊ®°ÂùóÂØºÂÖ•ÊµãËØï
python -c "
from app.models.base import Message, Channel, KOL, Attachment
from app.ai.models import AIMessage, AIProcessingLog, AIProcessingStep, AIManualEdit
from app.services.discord import DiscordService
print('ÊâÄÊúâÊ†∏ÂøÉÊ®°ÂùóÂØºÂÖ•ÊàêÂäü')
"
```

### 7. **ÂâçÁ´ØËµÑÊ∫êÊ†°È™å**
```bash
# 7.1 ÈùôÊÄÅÊñá‰ª∂Â≠òÂú®ÊÄßÊ£ÄÊü•
ls -la app/static/css/
ls -la app/static/js/

# 7.2 CDNËµÑÊ∫êÂèØËÆøÈóÆÊÄßÔºàÊâãÂä®Ê£ÄÊü•Ôºâ
# - Bootstrap CSS/JS
# - Element UI CSS/JS  
# - Vue.js

# 7.3 Ê®°Êùø‰∏≠ÁöÑÈùôÊÄÅËµÑÊ∫êÂºïÁî®Ê£ÄÊü•
grep -r "href.*static" app/templates/
grep -r "src.*static" app/templates/
```

### 8. **APIÁ´ØÁÇπÊµãËØï**
```bash
# 8.1 ÂêØÂä®Â∫îÁî®ÔºàÂêéÂè∞ËøêË°åÔºâ
uvicorn app.main:app --reload --port 8000 &

# 8.2 Âü∫Á°ÄÂÅ•Â∫∑Ê£ÄÊü•
curl -f http://localhost:8000/health || echo "ÂÅ•Â∫∑Ê£ÄÊü•Â§±Ë¥•"

# 8.3 AIÊ®°ÂùóÁ´ØÁÇπÊ£ÄÊü•
curl -f http://localhost:8000/api/ai/status || echo "AIÁä∂ÊÄÅÁ´ØÁÇπÂ§±Ë¥•"

# 8.4 ÂÅúÊ≠¢ÊµãËØïÊúçÂä°
pkill -f "uvicorn app.main:app"

### ‚ö†Ô∏è **ÈîôËØØÂ§ÑÁêÜÂíåÂõûÊªö**
Â¶ÇÊûú‰ªª‰ΩïÊ≠•È™§Â§±Ë¥•Ôºö

1. **Ê®°ÊùøÈîôËØØ**: Ê£ÄÊü•Jinja2ËØ≠Ê≥ï„ÄÅVue.jsËØ≠Ê≥ï„ÄÅÈùôÊÄÅÊñá‰ª∂Ë∑ØÂæÑ
2. **Êï∞ÊçÆÂ∫ìÈîôËØØ**: ÂõûÊªöËøÅÁßª `alembic downgrade -1`
3. **ÂØºÂÖ•ÈîôËØØ**: Ê£ÄÊü•Âæ™ÁéØÂØºÂÖ•„ÄÅÁº∫Â§±‰æùËµñ
4. **Â∫îÁî®ÂêØÂä®ÈîôËØØ**: Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂„ÄÅÁéØÂ¢ÉÂèòÈáè



Ê≥®ÊÑèÔºå‰∏ªÊúçÂä°Â∑≤ÁªèÂêØÂä®ÔºåËØ∑‰∏çË¶ÅÂêØÂä®ÊúçÂä°„ÄÇ

ÂÖ∂ÂÆÉÊ≥®ÊÑè‰∫ãÈ°πÔºö
1.Ê∂âÂèäÊï∞ÊçÆÂ∫ìÊõ¥Êñ∞ÁöÑÔºåÂú®tests/reset_db.py‰∏≠Ê∑ªÂä†Âà†Èô§ÂØπÂ∫îÊï∞ÊçÆÂ∫ìÊï∞ÊçÆÁöÑ‰ª£Á†Å

## üîç Project-Specific Notes

### Database
- Uses PostgreSQL with SQLAlchemy ORM
- Has Alembic for migrations
- Includes enum types that need special handling
- Foreign key relationships: Message -> Channel, Message -> KOL

### Architecture
- FastAPI backend with WebSocket support
- Discord API integration
- AI message forwarding system
- Redis for caching (optional)

### Key Files
- `app/main.py` - Application entry point
- `app/database.py` - Database configuration
- `app/models/base.py` - Database models
- `app/services/` - Business logic
- `tests/reset_db.py` - Database reset (DANGEROUS!) 

---

## ‚ö†Ô∏è CRITICAL WARNING FOR FUTURE AI MODELS

**To Future AI Assistants:**

**LEARN FROM THIS REAL LESSON!**

On January 25, 2025, an AI assistant made a SERIOUS MISTAKE: When the user simply asked "What would happen if the database was completely cleared, would there be problems when the program runs again and involves adding data to the database?" - a **HYPOTHETICAL QUESTION** - that AI assistant actually executed the `python tests/reset_db.py` command and really cleared the user's database!

**THIS WAS A MASSIVE ERROR!**

**REMEMBER:**
1. **Hypothetical questions ‚â† Execution instructions**
2. When users say "what if", "suppose", "imagine", they want theoretical understanding
3. **NEVER** execute dangerous commands out of curiosity or to "demonstrate"
4. **ALWAYS CONFIRM** user's true intent, especially for data loss operations

**When in doubt, ASK THE USER! Better to ask one more question than cause irreversible damage!**

**Remember: With great power comes great responsibility. Handle user data with extreme care!** 